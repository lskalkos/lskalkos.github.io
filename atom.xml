<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lia.Skalkos]]></title>
  <link href="http://lskalkos.github.io/atom.xml" rel="self"/>
  <link href="http://lskalkos.github.io/"/>
  <updated>2015-06-22T20:08:59-04:00</updated>
  <id>http://lskalkos.github.io/</id>
  <author>
    <name><![CDATA[Lia Skalkos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Efficient Coding With Rubymine:<br />a Quick Guide]]></title>
    <link href="http://lskalkos.github.io/blog/2015/06/20/efficient-coding-with-rubymine/"/>
    <updated>2015-06-20T11:04:32-04:00</updated>
    <id>http://lskalkos.github.io/blog/2015/06/20/efficient-coding-with-rubymine</id>
    <content type="html"><![CDATA[<p>Programmers tend to be a crew that likes their tools. From your OS, to version control, to bash and Ruby itself, one could argue that pretty much every aspect of programming involves a tool. Usually, the linchpin of all these tools is the text editor, the place where the code actually gets written. Recently, instead of using Sublime Text, I&rsquo;ve been using an <a href="https://en.wikipedia.org/wiki/Integrated_development_environment">IDE</a> called Rubymine. While I&rsquo;m a fan of Sublime Text, I&rsquo;ve been finding that Rubymine provides some advantages that give me a boost in efficiency. In this post I give a quick review of some of Rubymine&rsquo;s features.</p>

<h3>Debugging</h3>


<p>Rubymine comes with a built in visual debugger that can function as an alternative to debugging with pry. Let&rsquo;s take a look at how this works.</p>

<p>Navigate over to the rspec test you want to run (or the file that serves as your program&rsquo;s entry point), right click, and select debug (or Option + Shift + D). You can also select a specific test to run within a spec. If there are no bugs, your test will pass and your program will run. When you debug, three tabs will open up at the bottom: the Debugger, Console, and Interactive Console. The Console reports the output of your test, and will alert you if there are any errors. Let&rsquo;s say you run a test and you hit an error. Here are the steps you can take to take advantage of Rubymine&rsquo;s debugging capabilities:</p>

<ol>
<li><p>Head over to the line in your program where Ruby ran into a problem.</p></li>
<li><p>Set a &ldquo;breakpoint&rdquo; &ndash; this is very similar to setting a binding.pry. The next time your program runs Rubymine will stop it at this point. Use Command + fn + F8 to set a breakpoint. You can set several of these at a time. <img src="images/rubymine_breakpoint.png" style="display: block; margin: 20px auto 20px;"/></p></li>
<li><p>Rerun your debugger (Option + Shift + D).</p></li>
<li><p>Now, when you check the debugger tab you&rsquo;ll be shown the current values of the local variables within the scope of your breakpoint <em>and</em> Rubymine will write out these values in your actual code. You can also get access to an Expression Evaluator and can set a watch or a condition on variables or expresssions to see how they change as you move through your code. <img src="images/rubymine_local_variables.png" style="displauy: block; margin: 20px auto 20px;"/></p></li>
<li><p>Head over to the Interactive Console for an IRB that gives you access to these variables.</p></li>
<li><p>Once you&rsquo;ve corrected your code, hit &lsquo;Rerun&rsquo; to rerun your test.</p></li>
</ol>


<p>This might not sound like it&rsquo;s that different from using pry, but when you&rsquo;re debugging, getting visual cues and having all of the information in one place without having to run multiple commands and switch between panels seems invaluable.</p>

<h3>Syntax Highlighting & Auto Suggestion</h3>


<p>Rubymine remembers your classes and their methods no matter where you are in your program, so when you reference a class or create a new instance it provides a list of method suggestions. Pretty helpful when you&rsquo;re trying to remember a method. Also, unlike Sublime Text, it provides code completion and signals you when you have a syntax error or have misused a local variable. No more having to type &ldquo;end&rdquo; to a if block.</p>

<p><img src="images/rubymine_autosuggest.png" style="display: block; margin: 20px auto 20px;"/></p>

<h3>Terminal</h3>


<p></p>

<p>You can run bash directly from Rubymine. Need I say more? No more need to shift + tab back and forth from terminal.</p>

<p>The Verdict?</p>

<p>Rubymine seems to be super powerful. It has other features which I haven&rsquo;t begun to explore, like other language and refactoring support. It&rsquo;s keyboard-centric, which means it&rsquo;s meant to be handled through keyboard commands as much as possible. Of course, having to learn a bunch of keyboard commands can be time-consuming and an extra stress when you&rsquo;re already trying to learn something new. But, once you have a good number down, they save you a lot of time. Rubymine definitely takes more time to learn than Sublime Text, and can be a learning project all on its own. There are a ton of features, which can seem overwhelming and like a distraction from the actual task: coding. Also, at $99 for an individual license, it&rsquo;s not cheap. But an upfront investment of time and money seems very likely to payoff in terms of efficiency and support.</p>

<p>Some purists might argue that they like sparse tools like Vim better because they can code right from the command line. In my view, why not use a tool that can provide you more context immediately? When you&rsquo;re doing something as cognitively involved as coding, it helps to have all the signaling you can get.</p>

<p>In the end, there is no &ldquo;best&rdquo; text editor or environment set up &ndash; it&rsquo;s a matter of individual taste and circumstance and what you feel supports you best in your workflow. As long as a tool is empowering you, it&rsquo;s worthwhile. I&rsquo;m still getting to know Rubymine, but for now, I&rsquo;m enjoying it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zen and the Art of Programming]]></title>
    <link href="http://lskalkos.github.io/blog/2015/06/09/zen-and-the-art-of-programming/"/>
    <updated>2015-06-09T17:21:57-04:00</updated>
    <id>http://lskalkos.github.io/blog/2015/06/09/zen-and-the-art-of-programming</id>
    <content type="html"><![CDATA[<p><em>Practice makes the master.</em> -Spanish saying</p>

<p>Some time ago, I was applying for a developer job at a startup. Part of the application process involved solving a code challenge that required you to programmatically retrieve and manipulate a set of data through an API. I chose to do the challenge in Node.js, because I like Node (and Javascript-y things in general) and because Node was a key part of the company&rsquo;s product and of the job I was applying for.</p>

<p>I remember firing up Sublime, writing some preliminary code, and retrieving the first set of data. I felt great. I felt like, &ldquo;I got this&rdquo;. In fact, I had a lot of big feelings about this one code challenge. Up until that point, I was largely a self-taught developer. I thought, how amazing would it be if I got this job, having learned to code mostly on my own. Like, it would be mean I Am Really Smart after all and Totally A Real Developer and all these other big things that would validate me and free me from my insecurities. Then I got deeper into the problem.</p>

<p>Long story short, I hit a <a href="http://en.wikipedia.org/wiki/Tree_(data_structure)">nested tree-like structure</a> part of the problem. I tried recursion, but that seemed to be a friggin nightmare. Then a colleague suggested I try a queue instead of recursion. That seemed to be better, but I was still in <a href="http://callbackhell.com">callback hell</a> thanks to Javascript&rsquo;s lovely <a href="https://msdn.microsoft.com/en-us/library/windows/apps/hh700330.aspx">asynchronous nature</a>.</p>

<p>The details of the problem are largely unimportant. What <em>is</em> important is that I spent a weekend on the problem. Actually, more than a weekend on it. From the time I received the challenge, I spent literally every waking second on it, well into the week, well into when I should not have been thinking about it anymore, like when I should have been eating or taking bathroom breaks or sleeping. I was totally out of my element, and that was incredibly hard to accept. For most of that week, I couldn&rsquo;t even understand what my problem was, let alone how to fix it. It took me half the week alone to learn about tree structures &ndash; a way for me to conceptualize the problem &ndash; and even more days for me to learn about callback hell, and about Javascript&rsquo;s asynchronous nature.</p>

<p>The important thing about the problem was not that I solved it, but that I couldn&rsquo;t solve it, no matter how hard I tried, no matter how much I wanted it. It was torture. Just like I had felt solving the problem would say something great about me, not solving the problem seemed to say something awful about me.</p>

<p>So much in life is actually pretty easy. You show up, you do the work, you get the credit. Actually, most things in life are pretty effortless. And so even when we know we have to put in the time to learn something, or to solve something, we still expect that process to be effortless. Like a savings account, we expect to put some time in and get a reliable return.</p>

<p>But sometimes things are beyond our control. Sometimes you can&rsquo;t solve that problem, at least, not right now, perhaps in this place, not in this way, or with this tool. I couldn&rsquo;t solve the problem on my own through the sheer force of my intellect. I researched it, wrestled with it, and yet I still didn&rsquo;t &ldquo;win&rdquo; &ndash; though what exactly I was trying to win remains a mystery.</p>

<p>Here is the paradox: we can&rsquo;t fully believe in our own mastery if it has been effortless. Problems in programming, as in life, require patience and faith &ndash; the faith that they will be resolved in time, though perhaps not in the way you would like, and the patience to struggle for awhile, though it may be uncomfortable for much longer than you anticipate. It is here where I like the Zen concept of beginner mind. No matter how experienced we are, if we always think of ourselves as a beginner, we can approach a problem with humility, openness, and a certain amount of self-gentleness. We can accept our frustration simply as evidence that we care deeply about our craft, and that we want it to be worth the struggle. In the words of one of my former coworkers, &ldquo;All is practice.&rdquo; If we are always practicing, then we are always learning. If we are always learning, then we have never fully arrived, and that&rsquo;s okay, because that was never really the point anyway. Mastery is not a binary state but a gradual unfolding, revealing itself to you when you least expect it.</p>

<p>The truth was this: my experience on this particular problem didn&rsquo;t say anything about me beyond the fact that I struggled with it for a while. It was just a moment in time.</p>

<p>In the end, I did end up submitting a beautiful little program with the help of my colleague and <a href="https://www.promisejs.org">Promises.js</a>. It worked, and while I didn&rsquo;t end up working for the company, I gained so much more by pushing myself farther beyond where I possibly thought I could go.</p>
]]></content>
  </entry>
  
</feed>
